function output = f_energy(data, startIndex, endIndex,fs)

  paramsFunction = @(x) (cumtrapz(x.^2));
  [x,y] = size(data); 


  % filter then normalize each channel by std of entire data block
  data = high_pass_filter(data, fs);
  data = low_pass_filter(data, fs);
  %rmsdata = rms(data,1);
  %filtOut = data ./ repmat(rmsdata,size(data,1),1);


  % calculate feature as defined in params (for this specific window)
  % for each channel
 
%     timeOut(w) = winEnd/fs*1e6 + curTime;         % right-aligned
    if endIndex > x
        featureOut = paramsFunction(data(startIndex:end,:));
    else 
        featureOut = paramsFunction(data(startIndex:endIndex,:));
    end 
 
    %fprintf('linelength feature for %i through %i in channel %i \n', startIndex, endIndex,w);
    %disp(featureOut(1,w));
    %disp('---------'); 
  

  % smooth window using convolution 
%   if smoothDur > 0
%     smoothLength = 1/windowDisplacement * smoothDur; % in samples of data signal
%     smoother =  1 / smoothLength * ones(1,smoothLength);
%     for c = 1: length(channel)
%       featureOut(:,c) = conv(featureOut(:,c),smoother,'same');
%     end
%   end
  
%output = [timeOut featureOut];
[a,b] = size(featureOut);
output = featureOut(a,:); 
  %%---  feature creation and data processing
  %%-----------------------------------------
end


function y = low_pass_filter(x,Fs)
  % MATLAB Code
  % Generated by MATLAB(R) 8.2 and the DSP System Toolbox 8.5.
  % Generated on: 09-Mar-2015 11:44:09

  persistent Hd;

  if isempty(Hd)

    N     = 4;     % Order
    F3dB  = 50;    % 3-dB Frequency
    Apass = 1;     % Passband Ripple (dB)

    h = fdesign.lowpass('n,f3db,ap', N, F3dB, Apass, Fs);

    Hd = design(h, 'cheby1', ...
      'SOSScaleNorm', 'Linf');

    set(Hd,'PersistentMemory',true);

  end

  y = filtfilt(Hd.sosMatrix, Hd.ScaleValues, x);
%  y = filter(Hd,x);
end

function y = high_pass_filter(x, Fs)
  % MATLAB Code
  % Generated by MATLAB(R) 8.2 and the DSP System Toolbox 8.5.
  % Generated on: 04-Mar-2015 10:14:48

  persistent Hd;

  if isempty(Hd)

    N     = 3;    % Order
    F3dB  = 4;     % 3-dB Frequency
    Apass = 1;     % Passband Ripple (dB)

    h = fdesign.highpass('n,f3db,ap', N, F3dB, Apass, Fs);

    Hd = design(h, 'cheby1', ...
      'SOSScaleNorm', 'Linf');

    set(Hd,'PersistentMemory',true);

  end
  
  y = filtfilt(Hd.sosMatrix, Hd.ScaleValues, x);
%   y = filtfilt(h,x);
end
    